name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  APP_NAME: 'desa-cilame'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run frontend tests
      run: npm run test:ci || true
      
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm run test || true
        
    - name: Run linting
      run: npm run lint || true
      
    - name: Check TypeScript
      run: npm run type-check || true

  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build frontend
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci --production
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          .next/
          backend/node_modules/
          package*.json
          backend/package*.json
        retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        npm audit --audit-level=high || true
        cd backend
        npm audit --audit-level=high || true
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /var/www/desa-cilame-staging
          git pull origin main
          npm ci
          npm run build
          cd backend
          npm ci --production
          cd ..
          pm2 restart ecosystem.staging.config.js
          
    - name: Run staging health check
      run: |
        sleep 30
        curl -f https://staging.desacilame.com/api/main/health || exit 1
        curl -f https://staging.desacilame.com || exit 1

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, build, security-scan, deploy-staging]
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: Create deployment backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          sudo mkdir -p /var/backups/desa-cilame
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          sudo tar -czf "/var/backups/desa-cilame/pre_deploy_$TIMESTAMP.tar.gz" -C /var/www/desa-cilame .
          
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /var/www/desa-cilame
          git pull origin main
          npm ci
          npm run build
          cd backend
          npm ci --production
          cd ..
          pm2 restart ecosystem.config.js
          sudo systemctl reload nginx
          
    - name: Run production health check
      run: |
        sleep 60
        curl -f https://desacilame.com/api/main/health || exit 1
        curl -f https://desacilame.com/api/umkm/health || exit 1
        curl -f https://desacilame.com/api/admin/health || exit 1
        curl -f https://desacilame.com/api/location/health || exit 1
        curl -f https://desacilame.com || exit 1
        
    - name: Run post-deployment tests
      run: |
        # Test admin login endpoint
        curl -X POST -H "Content-Type: application/json" \
          -d '{"email":"admin@desacilame.com","password":"admin123"}' \
          https://desacilame.com/api/admin/auth/login || echo "Admin login test failed"
          
    - name: Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Production deployment successful for ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Production deployment failed for ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    name: Rollback Production
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
    - name: Rollback production deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /var/www/desa-cilame/deploy
          chmod +x deploy.sh
          ./deploy.sh rollback
          
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: '⚠️ Production rollback executed for ${{ github.sha }}'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  monitor:
    runs-on: ubuntu-latest
    name: Post-Deployment Monitoring
    needs: [deploy-production]
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for services to stabilize
      run: sleep 120
      
    - name: Run comprehensive monitoring
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /var/www/desa-cilame/deploy
          chmod +x monitoring.sh
          ./monitoring.sh
          
    - name: Performance test
      run: |
        # Basic performance test
        for i in {1..5}; do
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" https://desacilame.com)
          echo "Response time $i: ${RESPONSE_TIME}s"
          if (( $(echo "$RESPONSE_TIME > 5" | bc -l) )); then
            echo "Warning: Slow response time detected"
          fi
        done
        
    - name: Generate deployment report
      run: |
        echo "## Deployment Report" > deployment_report.md
        echo "- **Commit:** ${{ github.sha }}" >> deployment_report.md
        echo "- **Branch:** ${{ github.ref_name }}" >> deployment_report.md
        echo "- **Deployed by:** ${{ github.actor }}" >> deployment_report.md
        echo "- **Deployment time:** $(date)" >> deployment_report.md
        echo "- **Status:** ✅ Success" >> deployment_report.md
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment_report.md
        retention-days: 30